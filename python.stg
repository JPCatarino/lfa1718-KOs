valSignal ::= [
  "+":"+",
  "-":"-",
  default:"null"
]

condiOperators ::= [
   ">":">",
   ">=":">=",
   "<":"<",
   "<=":"<=",
   "==":"==",
   default:"null"
]

unitCondiOperators ::= [
   ">":"greater",
   ">=":">=",
   "<":"lesser",
   "<=":"<=",
   "==":"equal",
   default:"null"
]

Operators ::= [
   "+":"+",
   "-":"-",
   "*":"*",
   "/":"/",
   default:"null"
]

unitOperators ::= [
   "+":"add",
   "-":"sub",
   "*":"multiply",
   "/":"divide",
   default:"null"
]

unitSimpOperators ::= [
   "+":"add_simp",
   "-":"sub_simp",
   "*":"multiply_simp",
   "/":"divide_simp",
   default:"null"
]

//templates

unitClass(cname,stat) ::= <<
from unitClass import unitDec
class <cname>:
    UnitDic = {}
    <stats(stat)>
>>

baseClass(stat) ::= <<
from unitClass import val
from Units import prog1
<stats(stat)>
>>

module(stat) ::= <<
def main():
    <stats(stat)>
>>

stats(stat) ::= <<
<if(stat)><stat; separator="\n"><endif>
>>

valPrint(val) ::= <<
val.printVal(<val>)
>>

valConta(val1,val2,op) ::=<<
val.<unitOperators.(op)>(<val1>,<val2>)
>>

valContaSimp(val1,val2,op) ::=<<
val.<unitSimpOperators.(op)>(<val1>,<val2>)
>>

variable(name) ::= "<name>"

signedVariable(sign, unsigVal) ::=<<
(<valSignal.(sign)><unsigVal>)
>>

invertPot(name) ::= <<
for x in <name>:
    x.pot = -x.pot
>>

sum(left,right) ::=<<
<left> + <right>
>>
sub(left,right) ::=<<
<left> - <right>
>>
mult(left,right) ::=<<
<left> * <right>
>>
div(left,right) ::=<<
<left> / <right>
>>

contaSimples(left,op,right)::=<<
<left> <Operators.(op)> <right>
>>

condition(left,op,right) ::=<<
<left> <condiOperators.(op)> <right>
>>

unitCondition(left,op,right) ::=<<
val.<unitCondiOperators.(op)>(<left>,<right>)
>>

assign(left,right) ::= "<left> = <right>"

unit(uname,upot)::= <<
unitDec("<uname>",<upot>)
>>

tmpUnit(uname,upot)::= <<
unitDec(<uname>,<upot>)
>>

dicUnit(uname)::= <<
prog1.UnitDic['<uname>']
>>

createunit(uname,unit) ::=<<
UnitDic['<uname>'] = <unit>
>>

val(uvalue,unit) ::=<<
val(<uvalue>,<unit>)
>>

signedVal(sign,uvalue,unit) ::=<<
val(<valSignal.(sign)><uvalue>,<unit>)
>>

glom(unit) ::=<<
[<if(unit)><unit; separator=","><endif>]
>>

print(arg)::=<<
print(<arg>)
>>

if(condition,stat) ::=<<
if(<condition>):
    <stats(stat)>
>>

else(condition,stat) ::=<<
else:
    <stats(stat)>
>>

for(var,min,max,stat) ::=<<
for <var> in range (<min>, <max>):
    <stats(stat)>
>>

while(condition,stat) ::=<<
while (<condition>):
    <stats(stat)>
>>

do_while(condition,stat) ::=<<
<stats(stat)>
while (<condition>):
    <stats(stat)>
>>

pass()::=<<
pass
>>

pow(exponent) ::=<<
*(10**<exponent>)
>>

sum_on_self(left, right) ::=<<
<left> = <sum(left, right)>
>>

sub_on_self(left, right) ::=<<
<left> = <sub(left, right)>
>>

mult_on_self(left, right) ::=<<
<left> = <mult(left, right)>
>>

div_on_self(left, right) ::=<<
<left> = <div(left, right)>
>>
