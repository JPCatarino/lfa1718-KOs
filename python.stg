condiOperators ::= [
   ">":">",
   ">=":">=",
   "<":"<",
   "<=":"<=",
   "==":"==",
   default:"null"
]


//templates

unitClass(cname,stat) ::= <<
from unitClass import unitDec
class <cname>:
    UnitDic = {}
    <stats(stat)>
>>

baseClass(stat) ::= <<
from unitClass import val
from Units import prog1
<stats(stat)>
>>

module(stat) ::= <<
def main():
    <stats(stat)>
>>

stats(stat) ::= <<
<if(stat)><stat; separator="\n"><endif>
>>

valPrint(val) ::= <<
val.printVal(<val>)
>>

variable(name) ::= "<name>"

invertPot(name) ::= <<
for x in <name>:
    x.pot = -x.pot
>>

sum(left,right) ::=<<
<left> + <right>
>>
sub(left,right) ::=<<
<left> - <right>
>>
mult(left,right) ::=<<
<left> * <right>
>>
div(left,right) ::=<<
<left> / <right>
>>

condition(left,op,right) ::=<<
<left> <condiOperators.(op)> <right>
>>

assign(left,right) ::= "<left> = <right>"

unit(uname,upot)::= <<
unitDec("<uname>",<upot>)
>>

tmpUnit(uname,upot)::= <<
unitDec(<uname>,<upot>)
>>

dicUnit(uname)::= <<
prog1.UnitDic['<uname>']
>>

createunit(uname,unit) ::=<<
UnitDic['<uname>'] = <unit>
>>

val(uvalue,unit) ::=<<
val(<uvalue>,<unit>)
>>

glom(unit) ::=<<
[<if(unit)><unit; separator=","><endif>]
>>

print(arg)::=<<
print(<arg>)
>>

if(condition,stat) ::=<<
if(<condition>):
    <stats(stat)>
>>

for(var,min,max,stat) ::=<<
for <var> in range (<min>, <max>):
    <stats(stat)>
>>

while(condition,stat) ::=<<
while (<condition>):
    <stats(stat)>
>>

do_while(condition,stat) ::=<<
<stats(stat)>
while (<condition>):
    <stats(stat)>
>>